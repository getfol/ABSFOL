;*****************************************************************************
;*                                                                           *
;*             absdflt.fol - defaults for abstraction                        *
;*                                                                           *
;*                                                                           *
;* This file includes the definitions of some global symbols, which are      *
;* useful for the definitions of the rules.                                  *
;*  In particular, we must define:                                           *
;*  1. The two operators WABS and TABS.                                      *
;*  2. Some context-independent  variables and parameters.                   *
;*                                                                           *
;*****************************************************************************


;*****************************************************************************
;*                                                                           *
;* 1.          The definition of  "WABS" and "TABS"                          *
;*                                                                           *
;*                                                                           *
;*   "WABS" (Wff ABStract) and "TABS" (Term ABStract) are two system-defined *
;*   symbols rappresenting two maps between ground and abstract wffs/terms:  *
;*                                                                           *
;*   WABS : wff  -> abswff                                                   *
;*   TABS : term -> absterm.                                                 *
;*                                                                           *
;*  DESCRIPTION:                                                             *
;*    WABS&TABS-create  Creates the operators `WABS'  and `TABS'.            *
;*                      "WABS" is defined to be a built-in prefix            *
;*                      sentential connective.                               *
;*                      "TABS" is defined to be a built-in prefix            *
;*                      function constant symbol.                            *
;*                                                                           *
;*****************************************************************************



(DEFLAM WABS&TABS-create ()
 (SEQ
  (LET ((Wffabstract
        (logicsym-create 'Sentconn  'WABS 1
                         (conn-fmap-build 1) (logicsym_sact-mak 'WABS 'PRE))))
    (symls-add-lse CurSysSYMLS 'Sentconn (lse-mak 'WABS Wffabstract)))
  (LET ((Termabstract
        (funsym-create 'Funconst 'TABS 1 (LIST (fun-default_fmap-build 1))
                       (funsym_sact-mak 'TABS 'PRE))))
    (symls-add-lse CurSysSYMLS 'Funconst (lse-mak 'TABS  Termabstract )))))




;*****************************************************************************
;*                                                                           *
;* 2  Declarations of "$" variables and parameters which are common to every *
;*    context.                                                               *
;*    They are used in the declaration of the rules.                         *
;*                                                                           *
;*  DESCRIPTION:                                                             *
;*     <syntype>s$-create&add   Creates a system-defined group of a certain  *
;*                              syntype which are common to all contexts.    *
;*                                                                           *
;*****************************************************************************

(DEFLAM sentpars$-create&add (hooklist)
 (IF (MTL? hooklist)
  MTL
  (LET ((hook (FIRST hooklist)))
   (SEQ
    (symls-add-lse CurSysSYMLS 'Sentpar 
      (lse-mak hook (sentsym-create 'Sentpar hook (sentsym_sact-mak hook))))
    (sentpars$-create&add (REST hooklist))))))


(DEFLAM predpars$-create&add (arity hooklist )
 (IF (MTL? hooklist)
  MTL
  (LET ((hook (FIRST hooklist)))
   (SEQ
    (symls-add-lse CurSysSYMLS 'Predpar 
      (lse-mak hook     
        (predsym-create 'Predpar 
                        hook 
                        arity 
                        (predsym-fmap-build arity)
                        (predsym_sact-mak hook MTL))))
    (predpars$-create&add arity (REST hooklist))))))


(DEFLAM funpars$-create&add (arity hooklist )
 (IF (MTL? hooklist)
  MTL
  (LET ((hook (FIRST hooklist)))
   (SEQ
    (symls-add-lse CurSysSYMLS 'Funpar 
      (lse-mak hook     
        (funsym-create 'Funpar 
                       hook 
                       arity 
                       (LIST (fun-default_fmap-build arity))
                       (funsym_sact-mak hook MTL))))
    (funpars$-create&add arity (REST hooklist))))))


(DEFLAM indvars$-create&add (hooklist)
 (IF (MTL? hooklist)
  MTL
  (LET ((hook (FIRST hooklist)))
   (SEQ
    (symls-add-lse CurSysSYMLS 'Indvar 
       (lse-mak hook 
          (indsym-create 'Indvar hook SysMostgeneral (indsym_sact-mak hook))))
    (indvars$-create&add (REST hooklist))))))



(DEFLAM indpars$-create&add (hooklist)
 (IF (MTL? hooklist)
  MTL
  (LET ((hook (FIRST hooklist)))
   (SEQ
    (symls-add-lse CurSysSYMLS 'Indpar 
       (lse-mak hook 
          (indsym-create 'Indpar hook SysMostgeneral (indsym_sact-mak hook))))
    (indpars$-create&add (REST hooklist))))))



(DEFLAM absvars&pars$-create&add ()
 (SEQ

  (sentpars$-create&add 
   (LIST '$A '$A1 '$A2 '$A3 '$A4 '$A5 
         '$B '$B1 '$B2 '$B3 '$B4 '$B5 
         '$C '$C1 '$C2 '$C3 '$C4 '$C5 
         '$D '$D1 '$D2 '$D3 '$D4 '$D5 
         '$E '$E1 '$E2 '$E3 '$E4 '$E5 ))

  (predpars$-create&add 1 (LIST '$P1 '$Q1 '$R1 '$S1 '$T1 ))
  (predpars$-create&add 2 (LIST '$P2 '$Q2 '$R2 '$S2 '$T2 ))
  (predpars$-create&add 3 (LIST '$P3 '$Q3 '$R3 '$S3 '$T3 ))
  (predpars$-create&add 4 (LIST '$P4 '$Q4 '$R4 '$S4 '$T4 ))
  (predpars$-create&add 5 (LIST '$P5 '$Q5 '$R5 '$S5 '$T5 ))
  (predpars$-create&add 6 (LIST '$P6 '$Q6 '$R6 '$S6 '$T6 ))
  (predpars$-create&add 7 (LIST '$P7 '$Q7 '$R7 '$S7 '$T7 ))
  (predpars$-create&add 8 (LIST '$P8 '$Q8 '$R8 '$S8 '$T8 ))

  (funpars$-create&add 1 (LIST '|$f1| '|$g1| '|$h1| '|$i1| '|$l1| ))
  (funpars$-create&add 2 (LIST '|$f2| '|$g2| '|$h2| '|$i2| '|$l2| ))
  (funpars$-create&add 3 (LIST '|$f3| '|$g3| '|$h3| '|$i3| '|$l3| ))
  (funpars$-create&add 4 (LIST '|$f4| '|$g4| '|$h4| '|$i4| '|$l4| ))
  (funpars$-create&add 5 (LIST '|$f5| '|$g5| '|$h5| '|$i5| '|$l5| ))
  (funpars$-create&add 6 (LIST '|$f6| '|$g6| '|$h6| '|$i6| '|$l6| ))
  (funpars$-create&add 7 (LIST '|$f7| '|$g7| '|$h7| '|$i7| '|$l7| ))
  (funpars$-create&add 8 (LIST '|$f8| '|$g8| '|$h8| '|$i8| '|$l8| ))

  (indvars$-create&add 
   (LIST '|$x| '|$x1| '|$x2| '|$x3| '|$x4| '|$x5| '|$x6| '|$x7| '|$x8| '|$x9|
         '|$y| '|$y1| '|$y2| '|$y3| '|$y4| '|$y5| '|$y6| '|$y7| '|$y8| '|$y9|
         '|$z| '|$z1| '|$z2| '|$z3| '|$z4| '|$z5| '|$z6| '|$z7| '|$z8| '|$z9|
  ))
  (indpars$-create&add 
   (LIST '|$t| '|$t1| '|$t2| '|$t3| '|$t4| '|$t5| '|$t6| '|$t7| '|$t8| '|$t9|
         '|$u| '|$u1| '|$u2| '|$u3| '|$u4| '|$u5| '|$u6| '|$u7| '|$u8| '|$u9|
         '|$v| '|$v1| '|$v2| '|$v3| '|$v4| '|$v5| '|$v6| '|$v7| '|$v8| '|$v9|
  ))
))







